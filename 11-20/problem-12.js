console.log(
  '-----\nThe sequence of triangle numbers is generated by adding the natural numbers.\nSo the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:\n1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...\nLet us list the factors of the first seven triangle numbers:\n\n 1: 1\n3: 1,3\n6: 1,2,3,6\n10: 1,2,5,10\n15: 1,3,5,15\n21: 1,3,7,21\n28: 1,2,4,7,14,28\n\nWe can see that 28 is the first triangle number to have over five divisors.\nWhat is the value of the first triangle number to have over five hundred divisors?\n-----\n'
);

const generateTriangleNumbersSequence = (sequenceSize) => {
  let iterator = 1;
  let sequence = [];
  for (let i = 0; i <= sequenceSize; i++) {
    if (i == 0) {
      continue;
    }
    if (i == 1) {
      sequence.push(iterator);
      continue;
    }
    iterator += i;
    sequence.push(iterator);
  }
  return sequence;
};

const findDivisorsOfNumber = (number) => {
  let divisors = [];
  for (let i = number; i >= 1; i--) {
    if (number % i == 0) {
      divisors.push(i);
    }
  }
  return divisors;
};

const sequence = generateTriangleNumbersSequence(100000);
console.log(sequence[sequence.length - 1]);
const divisors = findDivisorsOfNumber(sequence[sequence.length - 1]);
console.log(divisors.length);
